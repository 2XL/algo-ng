#!/bin/bash -e

TERRAFORM_VERSION="0.11.2"
SKIP_TAGS="_null encrypted"
ADDITIONAL_PROMPT="[pasted values will not be displayed]"

additional_roles () {

  read -p "
  Do you want macOS/iOS clients to enable \"VPN On Demand\" when connected to cellular networks?
  [y/N]: " -r OnDemandEnabled_Cellular
  OnDemandEnabled_Cellular=${OnDemandEnabled_Cellular:-n}
  if [[ "$OnDemandEnabled_Cellular" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" OnDemandEnabled_Cellular=true"; fi

  read -p "
  Do you want macOS/iOS clients to enable \"VPN On Demand\" when connected to Wi-Fi?
  [y/N]: " -r OnDemandEnabled_WIFI
  OnDemandEnabled_WIFI=${OnDemandEnabled_WIFI:-n}
  if [[ "$OnDemandEnabled_WIFI" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" OnDemandEnabled_WIFI=true"; fi

  if [[ "$OnDemandEnabled_WIFI" =~ ^(y|Y)$ ]]; then
    read -p "
  List the names of trusted Wi-Fi networks (if any) that macOS/iOS clients exclude from using the VPN (e.g., your home network. Comma-separated value, e.g., HomeNet,OfficeWifi,AlgoWiFi)
  : " -r OnDemandEnabled_WIFI_EXCLUDE
    OnDemandEnabled_WIFI_EXCLUDE=${OnDemandEnabled_WIFI_EXCLUDE:-_null}
    EXTRA_VARS+=" OnDemandEnabled_WIFI_EXCLUDE=\"$OnDemandEnabled_WIFI_EXCLUDE\""
  fi

  read -p "
  Do you want to install a DNS resolver on this VPN server, to block ads while surfing?
  [y/N]: " -r dns_enabled
  dns_enabled=${dns_enabled:-n}
  if [[ "$dns_enabled" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" role_dns_adblocking=true"; fi

  read -p "
  Do you want each user to have their own account for SSH tunneling?
  [y/N]: " -r ssh_tunneling_enabled
  ssh_tunneling_enabled=${ssh_tunneling_enabled:-n}
  if [[ "$ssh_tunneling_enabled" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" role_ssh_tunneling=true"; fi

  read -p "
  Do you want to apply operating system security enhancements on the server? (warning: replaces your sshd_config)
  [y/N]: " -r security_enabled
  security_enabled=${security_enabled:-n}
  if [[ "$security_enabled" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" role_security=true"; fi

  read -p "
  Do you want the VPN to support Windows 10 or Linux Desktop clients? (enables compatible ciphers and key exchange, less secure)
  [y/N]: " -r Win10_Enabled
  Win10_Enabled=${Win10_Enabled:-n}
  if [[ "$Win10_Enabled" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" Win10_Enabled=true"; fi

  read -p "
  Do you want to retain the CA key? (required to add users in the future, but less secure)
  [y/N]: " -r Store_CAKEY
  Store_CAKEY=${Store_CAKEY:-N}
  if [[ "$Store_CAKEY" =~ ^(n|N)$ ]]; then EXTRA_VARS+=" Store_CAKEY=false"; fi

}

deploy () {
  export  TF_CLI_ARGS_apply="-auto-approve -parallelism=1"
  export  TF_CLI_ARGS_destroy="-force"
  export  TF_VAR_algo_name="${ALGO_SERVER_NAME}" \
          TF_VAR_algo_provider="${ALGO_PROVIDER}" \
          TF_VAR_region="$TF_VAR_region"

  ${TERRAFORM_BIN} workspace select ${ALGO_PROVIDER}-${TF_VAR_region}-${ALGO_SERVER_NAME} \
    || ${TERRAFORM_BIN} workspace new ${ALGO_PROVIDER}-${TF_VAR_region}-${ALGO_SERVER_NAME}
  ${TERRAFORM_BIN} init cloud/$ALGO_PROVIDER/
  ${TERRAFORM_BIN} ${ALGO_COMMAND:-apply} cloud/$ALGO_PROVIDER/
}

azure () {
  if [[ -z $ARM_CLIENT_SECRET ]]; then
    read -p "
    Enter your azure secret id (https://github.com/trailofbits/algo/blob/master/docs/cloud-azure.md)
    You can skip this step if you want to use your defaults credentials from ~/.azure/credentials
    $ADDITIONAL_PROMPT
    [...]: " -rs ARM_CLIENT_SECRET
  fi

  if [[ -z $ARM_TENANT_ID ]]; then
    read -p "

    Enter your azure tenant id (https://github.com/trailofbits/algo/blob/master/docs/cloud-azure.md)
    You can skip this step if you want to use your defaults credentials from ~/.azure/credentials
    $ADDITIONAL_PROMPT
    [...]: " -rs ARM_TENANT_ID
  fi

  if [[ -z $ARM_CLIENT_ID ]]; then
    read -p "

    Enter your azure client id (application id) (https://github.com/trailofbits/algo/blob/master/docs/cloud-azure.md)
    You can skip this step if you want to use your defaults credentials from ~/.azure/credentials
    $ADDITIONAL_PROMPT
    [...]: " -rs ARM_CLIENT_ID
  fi

  if [[ -z $ARM_SUBSCRIPTION_ID ]]; then
    read -p "

    Enter your azure subscription id (https://github.com/trailofbits/algo/blob/master/docs/cloud-azure.md)
    You can skip this step if you want to use your defaults credentials from ~/.azure/credentials
    $ADDITIONAL_PROMPT
    [...]: " -rs ARM_SUBSCRIPTION_ID
  fi

  if [[ -z $ALGO_REGION ]]; then
    read -p "

    What region should the server be located in? (https://azure.microsoft.com/en-us/regions/)
      1.  South Central US
      2.  Central US
      3.  North Europe
      4.  West Europe
      5.  Southeast Asia
      6.  Japan West
      7.  Japan East
      8.  Australia Southeast
      9.  Australia East
      10. Canada Central
      11. West US 2
      12. West Central US
      13. UK South
      14. UK West
      15. West US
      16. Brazil South
      17. Canada East
      18. Central India
      19. East Asia
      20. Germany Central
      21. Germany Northeast
      22. Korea Central
      23. Korea South
      24. North Central US
      25. South India
      26. West India
      27. East US
      28. East US 2

    Enter the number of your desired region:
    [1]: " -r azure_region
    azure_region=${azure_region:-1}

    case "$azure_region" in
      1) region="southcentralus" ;;
      2) region="centralus" ;;
      3) region="northeurope" ;;
      4) region="westeurope" ;;
      5) region="southeastasia" ;;
      6) region="japanwest" ;;
      7) region="japaneast" ;;
      8) region="australiasoutheast" ;;
      9) region="australiaeast" ;;
      10) region="canadacentral" ;;
      11) region="westus2" ;;
      12) region="westcentralus" ;;
      13) region="uksouth" ;;
      14) region="ukwest" ;;
      15) region="westus" ;;
      16) region="brazilsouth" ;;
      17) region="canadaeast" ;;
      18) region="centralindia" ;;
      19) region="eastasia" ;;
      20) region="germanycentral" ;;
      21) region="germanynortheast" ;;
      22) region="koreacentral" ;;
      23) region="koreasouth" ;;
      24) region="northcentralus" ;;
      25) region="southindia" ;;
      26) region="westindia" ;;
      27) region="eastus" ;;
      28) region="eastus2" ;;
    esac
  else
    TF_VAR_region="$ALGO_REGION"
  fi

  export  ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID \
          ARM_CLIENT_ID=$ARM_CLIENT_ID \
          ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET \
          ARM_TENANT_ID=$ARM_TENANT_ID \
          ALGO_SERVER_NAME=${ALGO_SERVER_NAME}
}

digitalocean () {
  if [[ -z $DIGITALOCEAN_TOKEN ]]; then
    read -p "
    Enter your API token. The token must have read and write permissions (https://cloud.digitalocean.com/settings/api/tokens):
    $ADDITIONAL_PROMPT
    : " -rs DIGITALOCEAN_TOKEN
  fi

  if [[ -z $ALGO_REGION ]]; then
    read -p "

    What region should the server be located in?
      1.  Amsterdam        (Datacenter 2)
      2.  Amsterdam        (Datacenter 3)
      3.  Frankfurt
      4.  London
      5.  New York         (Datacenter 1)
      6.  New York         (Datacenter 2)
      7.  New York         (Datacenter 3)
      8.  San Francisco    (Datacenter 1)
      9.  San Francisco    (Datacenter 2)
      10. Singapore
      11. Toronto
      12. Bangalore
    Enter the number of your desired region:
    [7]: " -r region
    region=${region:-7}

    case "$region" in
      1) TF_VAR_region="ams2" ;;
      2) TF_VAR_region="ams3" ;;
      3) TF_VAR_region="fra1" ;;
      4) TF_VAR_region="lon1" ;;
      5) TF_VAR_region="nyc1" ;;
      6) TF_VAR_region="nyc2" ;;
      7) TF_VAR_region="nyc3" ;;
      8) TF_VAR_region="sfo1" ;;
      9) TF_VAR_region="sfo2" ;;
      10) TF_VAR_region="sgp1" ;;
      11) TF_VAR_region="tor1" ;;
      12) TF_VAR_region="blr1" ;;
    esac
  else
    TF_VAR_region="$ALGO_REGION"
  fi

  export  DIGITALOCEAN_TOKEN=$DIGITALOCEAN_TOKEN \
          ALGO_SERVER_NAME=${ALGO_SERVER_NAME}
}

ec2 () {
  if [[ -z $AWS_ACCESS_KEY_ID && -z $AWS_PROFILE ]]; then
    read -p "
    Enter your aws_access_key (http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html)
    Note: Make sure to use an IAM user with an acceptable policy attached (see https://github.com/trailofbits/algo/blob/master/docs/deploy-from-ansible.md).
    $ADDITIONAL_PROMPT
    [AKIA...]: " -rs AWS_ACCESS_KEY_ID
  fi

  if [[ -z $AWS_SECRET_ACCESS_KEY && -z $AWS_PROFILE ]]; then
    read -p "

    Enter your aws_secret_key (http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html)
    $ADDITIONAL_PROMPT
    [ABCD...]: " -rs AWS_SECRET_ACCESS_KEY
  fi

  if [[ -z $ALGO_REGION ]]; then
    read -p "

    What region should the server be located in?
      1.   us-east-1           US East (N. Virginia)
      2.   us-east-2           US East (Ohio)
      3.   us-west-1           US West (N. California)
      4.   us-west-2           US West (Oregon)
      5.   ap-south-1          Asia Pacific (Mumbai)
      6.   ap-northeast-2      Asia Pacific (Seoul)
      7.   ap-southeast-1      Asia Pacific (Singapore)
      8.   ap-southeast-2      Asia Pacific (Sydney)
      9.   ap-northeast-1      Asia Pacific (Tokyo)
      10.  eu-central-1        EU (Frankfurt)
      11.  eu-west-1           EU (Ireland)
      12.  eu-west-2           EU (London)
      13.  ca-central-1        Canada (Central)
      14.  sa-east-1           SÃ£o Paulo
    Enter the number of your desired region:
    [1]: " -r aws_region
    aws_region=${aws_region:-1}

    case "$aws_region" in
      1) TF_VAR_region="us-east-1" ;;
      2) TF_VAR_region="us-east-2" ;;
      3) TF_VAR_region="us-west-1" ;;
      4) TF_VAR_region="us-west-2" ;;
      5) TF_VAR_region="ap-south-1" ;;
      6) TF_VAR_region="ap-northeast-2" ;;
      7) TF_VAR_region="ap-southeast-1" ;;
      8) TF_VAR_region="ap-southeast-2" ;;
      9) TF_VAR_region="ap-northeast-1" ;;
      10) TF_VAR_region="eu-central-1" ;;
      11) TF_VAR_region="eu-west-1" ;;
      12) TF_VAR_region="eu-west-2";;
      13) TF_VAR_region="ca-central-1" ;;
      14) TF_VAR_region="sa-east-1" ;;
    esac
  else
    TF_VAR_region="$ALGO_REGION"
  fi

  export  AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
          AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
          ALGO_SERVER_NAME=${ALGO_SERVER_NAME}
}

gce () {
  if [[ -z $GOOGLE_CREDENTIALS ]]; then
    read -p "
    Enter the local path to your credentials JSON file (https://support.google.com/cloud/answer/6158849?hl=en&ref_topic=6262490#serviceaccounts):
    : " -r GOOGLE_CREDENTIALS
  fi

  if [[ -z $GOOGLE_PROJECT ]]; then
    read -p "
    Enter the project id (You can gather it from the previous step, credention or follow the link https://support.google.com/cloud/answer/6158840?hl=en):
    : " -r GOOGLE_PROJECT
  fi

  if [[ -z $ALGO_REGION ]]; then
    read -p "

    What zone should the server be located in?
      1. Western US       (Oregon A)
      2. Western US       (Oregon B)
      3. Western US       (Oregon C)
      4. Central US       (Iowa A)
      5. Central US       (Iowa B)
      6. Central US       (Iowa C)
      7. Central US       (Iowa F)
      8. Eastern US       (Northern Virginia A)
      9. Eastern US       (Northern Virginia B)
      10. Eastern US      (Northern Virginia C)
      11. Eastern US      (South Carolina B)
      12. Eastern US      (South Carolina C)
      13. Eastern US      (South Carolina D)
      14. Western Europe  (Belgium B)
      15. Western Europe  (Belgium C)
      16. Western Europe  (Belgium D)
      17. Western Europe  (London A)
      18. Western Europe  (London B)
      19. Western Europe  (London C)
      20. Western Europe  (Frankfurt A)
      21. Western Europe  (Frankfurt B)
      22. Western Europe  (Frankfurt C)
      23. Southeast Asia  (Singapore A)
      24. Southeast Asia  (Singapore B)
      25. East Asia       (Taiwan A)
      26. East Asia       (Taiwan B)
      27. East Asia       (Taiwan C)
      28. Northeast Asia  (Tokyo A)
      29. Northeast Asia  (Tokyo B)
      30. Northeast Asia  (Tokyo C)
      31. Australia	(Sydney A)
      32. Australia	(Sydney B)
      33. Australia	(Sydney C)
      34. South America   (SÃ£o Paulo A)
      35. South America   (SÃ£o Paulo B)
      36. South America   (SÃ£o Paulo C)
    Please choose the number of your zone. Press enter for default (#14) zone.
    [14]: " -r region
    region=${region:-14}

    case "$region" in
      1) TF_VAR_region="us-west1-a" ;;
      2) TF_VAR_region="us-west1-b" ;;
      3) TF_VAR_region="us-west1-c" ;;
      4) TF_VAR_region="us-central1-a" ;;
      5) TF_VAR_region="us-central1-b" ;;
      6) TF_VAR_region="us-central1-c" ;;
      7) TF_VAR_region="us-central1-f" ;;
      8) TF_VAR_region="us-east4-a" ;;
      9) TF_VAR_region="us-east4-b" ;;
      10) TF_VAR_region="us-east4-c" ;;
      11) TF_VAR_region="us-east1-b" ;;
      12) TF_VAR_region="us-east1-c" ;;
      13) TF_VAR_region="us-east1-d" ;;
      14) TF_VAR_region="europe-west1-b" ;;
      15) TF_VAR_region="europe-west1-c" ;;
      16) TF_VAR_region="europe-west1-d" ;;
      17) TF_VAR_region="europe-west2-a" ;;
      18) TF_VAR_region="europe-west2-b" ;;
      19) TF_VAR_region="europe-west2-c" ;;
      20) TF_VAR_region="europe-west3-a" ;;
      21) TF_VAR_region="europe-west3-b" ;;
      22) TF_VAR_region="europe-west3-c" ;;
      23) TF_VAR_region="asia-southeast1-a" ;;
      24) TF_VAR_region="asia-southeast1-b" ;;
      25) TF_VAR_region="asia-east1-a" ;;
      26) TF_VAR_region="asia-east1-b" ;;
      27) TF_VAR_region="asia-east1-c" ;;
      28) TF_VAR_region="asia-northeast1-a" ;;
      29) TF_VAR_region="asia-northeast1-b" ;;
      30) TF_VAR_region="asia-northeast1-c" ;;
      31) TF_VAR_region="australia-southeast1-a" ;;
      32) TF_VAR_region="australia-southeast1-b" ;;
      33) TF_VAR_region="australia-southeast1-c" ;;
      34) TF_VAR_region="southamerica-east1-a" ;;
      35) TF_VAR_region="southamerica-east1-b" ;;
      36) TF_VAR_region="southamerica-east1-c" ;;
    esac
  else
    TF_VAR_region="$ALGO_REGION"
  fi

  export  GOOGLE_CREDENTIALS=$GOOGLE_CREDENTIALS \
          TF_VAR_google_credentials=$GOOGLE_CREDENTIALS \
          ALGO_SERVER_NAME=${ALGO_SERVER_NAME}
}

non_cloud () {
  read -p "
  Enter the IP address of your server: (or use localhost for local installation)
  [localhost]: " -r server_ip
  server_ip=${server_ip:-localhost}

  read -p "

  What user should we use to login on the server? (note: passwordless login required, or ignore if you're deploying to localhost)
  [root]: " -r server_user
  server_user=${server_user:-root}

  if [ "x${server_ip}" = "xlocalhost" ]; then
  	myip=""
  else
  	myip=${server_ip}
  fi

  read -p "

  Enter the public IP address of your server: (IMPORTANT! This IP is used to verify the certificate)
  [$myip]: " -r IP_subject
  IP_subject=${IP_subject:-$myip}

  if [ "x${IP_subject}" = "x" ]; then
  	echo "no server IP given. exiting."
  	exit 1
  fi

  ROLES="local vpn"
  EXTRA_VARS="server_ip=$server_ip server_user=$server_user IP_subject_alt_name=$IP_subject"
  SKIP_TAGS+=" cloud update-alternatives"

  read -p "

  Was this server deployed by Algo previously?
  [y/N]: " -r Deployed_By_Algo
  Deployed_By_Algo=${Deployed_By_Algo:-n}
  if [[ "$Deployed_By_Algo" =~ ^(y|Y)$ ]]; then EXTRA_VARS+=" Deployed_By_Algo=Y"; fi

}

algo_provisioning () {
  if [[ -z $ALGO_PROVIDER ]]; then
    echo -n "
    What provider would you like to use?
      1. DigitalOcean
      2. Amazon EC2
      3. Google Compute Engine

    Enter the number of your desired provider
    : "
    read -r ALGO_PROVIDER
  fi

  if [[ -z $ALGO_SERVER_NAME ]]; then
    read -p "

    Name the vpn server:
    [algo-local]: " -r ALGO_SERVER_NAME
  fi
  export ALGO_SERVER_NAME=${ALGO_SERVER_NAME:-algo-local}

  case "$ALGO_PROVIDER" in
    1|digitalocean) ALGO_PROVIDER=digitalocean; digitalocean; ;;
    2|ec2) ALGO_PROVIDER=ec2; ec2; ;;
    3|azure) ALGO_PROVIDER=azure; azure; ;;
    3|gce) ALGO_PROVIDER=gce; gce; ;;
    # 5|non_cloud) ALGO_PROVIDER=non_cloud; non_cloud; ;;
    *) exit 1 ;;
  esac

  # additional_roles
  deploy
}

user_management () {

  read -p "
  Enter the IP address of your server: (or use localhost for local installation)
  : " -r server_ip

  read -p "
  What user should we use to login on the server? (note: passwordless login required, or ignore if you're deploying to localhost)
  [root]: " -r server_user
  server_user=${server_user:-root}

  read -p "
  Do you want each user to have their own account for SSH tunneling?
  [y/N]: " -r ssh_tunneling_enabled
  ssh_tunneling_enabled=${ssh_tunneling_enabled:-n}

  if [ "x${server_ip}" = "xlocalhost" ]; then
  	myip=""
  else
  	myip=${server_ip}
  fi

  read -p "

  Enter the public IP address of your server: (IMPORTANT! This IP is used to verify the certificate)
  [$myip]: " -r IP_subject
  IP_subject=${IP_subject:-$myip}

  if [ "x${IP_subject}" = "x" ]; then
  echo "no server IP given. exiting."
  exit 1
  fi

  read -p "
  Enter the password for the private CA key:
  $ADDITIONAL_PROMPT
  : " -rs easyrsa_CA_password

  ansible-playbook users.yml -e "server_ip=$server_ip server_user=$server_user ssh_tunneling_enabled=$ssh_tunneling_enabled IP_subject_alt_name=$IP_subject easyrsa_CA_password=$easyrsa_CA_password" -t update-users --skip-tags common
}

help () {
  echo "Usage: $0 <command>

  The available commands for execution are listed below.

  Common commands:
      apply              Builds or changes infrastructure
      destroy            Destroy Terraform-managed infrastructure
  "
  exit 0
}

locate_terraform () {
  export TERRAFORM_BIN=$(which ./terraform || which terraform)
  if [[ "$TERRAFORM_BIN" == "" ]]; then
    echo "
    Terraform binary is not found.
    Please, read the readme and follow the instructions"
    exit 1
  fi
}

case "$1" in
  update-users) user_management ;;
  apply) export ALGO_COMMAND="apply" ;;
  destroy) export ALGO_COMMAND="destroy" ;;
  get-terraform) get_terraform ;;
  *) help "$@" ;;
esac

locate_terraform
algo_provisioning
